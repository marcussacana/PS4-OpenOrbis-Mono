<#
// Copyright (c) Six Labors.
// Licensed under the Six Labors Split License.
#>
<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// Copyright (c) Six Labors.
// Licensed under the Six Labors Split License.

// <auto-generated />
using System;
using System.Numerics;

namespace SixLabors.ImageSharp.PixelFormats.PixelBlenders
{
    /// <summary>
    /// Collection of Porter Duff alpha blending functions applying different composition models.
    /// </summary>
    /// <remarks>
    /// These functions are designed to be a general solution for all color cases,
    /// that is, they take in account the alpha value of both the backdrop
    /// and source, and there's no need to alpha-premultiply neither the backdrop
    /// nor the source.
    /// Note there are faster functions for when the backdrop color is known
    /// to be opaque
    /// </remarks>
    internal static class DefaultPixelBlenders<TPixel>
        where TPixel : unmanaged, IPixel<TPixel>
    {

<#
    var composers = new []{
        "Src",
        "SrcAtop",
        "SrcOver",
        "SrcIn",
        "SrcOut",
        "Dest",
        "DestAtop",
        "DestOver",
        "DestIn",
        "DestOut",
        "Clear",
        "Xor",
    };

    var blenders = new []{
        "Normal",
        "Multiply",
        "Add",
        "Subtract",
        "Screen",
        "Darken",
        "Lighten",
        "Overlay",
        "HardLight"
    };

        foreach(var composer in composers) {
        foreach(var blender in blenders) {

            var blender_composer= $"{blender}{composer}";
#>
            /// <summary>
            /// A pixel blender that implements the "<#= blender_composer#>" composition equation.
            /// </summary>
            public class <#= blender_composer#> : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static <#=blender_composer#> Instance { get; } = new <#=blender_composer#>();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.FromScaledVector4(PorterDuffFunctions.<#=blender_composer#>(background.ToScaledVector4(), source.ToScaledVector4(), Numerics.Clamp(amount, 0, 1)));
                    return dest;
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)
                {
                    amount = Numerics.Clamp(amount, 0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.<#=blender_composer#>(background[i], source[i], amount);
                    }
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.<#=blender_composer#>(background[i], source[i], Numerics.Clamp(amount[i], 0, 1));
                    }
                }
            }

<#
        }
    }

#>
    }
}
